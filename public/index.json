
[{"content":"\rThis is the core (top-level) _index.md page #\r","date":"27 July 2025","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"\rThis section holds a portfolio of my work. #\rPlease reach out to me if you have any questions.\n","date":"27 July 2025","externalUrl":null,"permalink":"/portfolios/","section":"","summary":"","title":"","type":"portfolios"},{"content":"Searching for roles can be very time-consuming especially when the job title you\u0026rsquo;re searching for is a common one which applies to a wide variety of domains such as my job title does.\nUsing my n8n automations skills and my knowledge of GenAI, I built 3 automations to save time and focus my job search. The first automation saves me around 2 to 3 hours of reading job roles\nSummarising (GenAI) and keyword search - triggered by a webhook #\rThe first automation us triggered by a webhook to which is sent the URL of a role (usually from LinkedIn). Any roles that are processes by the automation are stored in a Google Sheet. Using the URL that triggered the automation as the unique key, the sheet is searched to see if the URL has already been processed and if it has, the automation stops there. If, however, the url is not already in the spreadsheet, the web page for the role is retrieved passed through to OpenAI for analysis and the analysis is stored in the same Google Sheet.\nTo trigger the workflow, as I view the headlines and first paragraph or 2 of a role on LinkedIn (and others), I need to be able to send the role to the webhook. To do this I have a browser extension which allows me to right-click on a URL and select \u0026ldquo;send to webhook\u0026rdquo; in the drop-down.\nExcluding and filtering contract roles from an RSS feed #\rThe 2nd automation consumes an RSS feed on a schedule. Once again Google Sheets - two of them - are used to track things. The first sheet lists the RSS feed URLs and the name I gave that feed. These are retrieved and passed to the \u0026ldquo;read RSS feed\u0026rdquo; which captures all the roles for each of the feeds. A small piece searches for terms in the job title which are not of interest (e.g. I exclude \u0026ldquo;developer\u0026rdquo; as these roles are not relevant to me). A filter on the excluded flag stops the processing of those records but lets through all the other roles. An information extractor node uses AI to find and extract key information such as the day rate, whether the role\u0026rsquo;s text has the words automation or observability, etc. A 2nd filter check if these terms are present and if they are adds the role to a Google Sheet. This automation has reduced the number of roles I need to read from around 50 per day to a handful.\n","date":"27 July 2025","externalUrl":null,"permalink":"/portfolios/job-search-optimisation-using-n8n/","section":"","summary":"","title":"Job Search Optimisation automation using n8n","type":"portfolios"},{"content":"\rThis section holds the Homelabbing articles #\rIt lets you see what else I have been up to. Please reach out to me if you have any questions.\n","date":"1 July 2025","externalUrl":null,"permalink":"/homelabbing/","section":"","summary":"","title":"","type":"homelabbing"},{"content":"","date":"1 July 2025","externalUrl":null,"permalink":"/tags/1-2-3/","section":"Tags","summary":"","title":"1-2-3","type":"tags"},{"content":"\rProxmox VM creation with CloudImage and CloudInit #\rI wanted to build a few VMs for my k8s cluster - a master node which would hold the k8s control plane and a few worker nodes.\nI didn\u0026rsquo;t fancy building 4 VMs for my k8s cluster by manually installing the O/S (Ubuntu 24.04) from the ISO and going through the installation GUI when faster and more reliable methods were available. Enter CloudInit.\nDeploying templates to VMs using CloudInit starts with the creation of the VM template. While this can be done via the Proxmox UI, I chose to use the command-line as much as possible.\nTo create the template, there are a number of internet resources you can follow. I based myself on Techno Tim\u0026rsquo;s Perfect Proxmox Template with Cloud Image and Cloud Init video though there are a number of very similar videos and blogs. While the video is around 3 years old, I found it a good base. Note that Tim also publishes a companion blog with the details of the commands etc. However, I find that these resources don\u0026rsquo;t provide enough context or explanations for the commands they use. As part of my intention in these articles is to educate/explain, this article is somewhat longer and more wordy than the other resources you may read.\nAt the end of this article, I have compiled some resources that have been useful to me and may be to you.\nAll the commands below were run as the root user on Proxmox (or \u0026ldquo;pve\u0026rdquo; for Proxmox Virtual Environment).\nThe key steps are: #\rDownload the cloud image Create the new Virtual machine Import then attach the downloaded CloudInit image to the VM Add a CloudInit drive to the VM and make it bootable Add a serial console to the VM Convert the VM to a template Configure CloudInit (the parameters, that is) Clone the template into a new VM Update the CloudInit configuration in the VM to meet your needs (Optional) Grow the disk Download the CloudInit image #\rA Cloud Init disk image is similar to an ISO file and is the boot/installation disk for our VM. Canonical\u0026rsquo;s repository of Cloud Init images is here. You will need to download the image that suits you needs. For me that was: https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img. Once you\u0026rsquo;ve found the image you want in the repository of cloud images, right-click the file and select \u0026lsquo;Copy link address\u0026rsquo; so that you can paste it into your download command.\nTo perform the download, use the following command (replacing the URL with your choice of CloudInit image, the one you \u0026lsquo;copied\u0026rsquo; in the previous paragraph) while logged into your Proxmox server as root. The file will be downloaded in the current directory. You may wish to download it to /var/lib/vz/template/iso (the iso directory of the \u0026rsquo;local\u0026rsquo; storage in Proxmox). In a later step the downloaded image will be imported into the storage of your choice alongside the VM definition.\nwget https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img Create the new VM (to later be converted to a template) #\rIn this process, we first create a VM and later, when we want to use it, we clone it. It\u0026rsquo;s best practice to convert the VM into a \u0026ldquo;template\u0026rdquo; which protects you from accidentally starting it, etc. Thus it is the template that we will (later) clone into the actual VM we want.\nPick the values you need for memory, CPU, etc., making sure that the VM ID is unique. I prefer to use what I think of as minimum usable values. For my purposes, my k3s control pane node needs 4GiB RAM and 4 vCPU, and the worker nodes will be using the same values, though as their load increases, the RAM and vCPU will probably need to be adjusted.\nqm create 8200 --memory 4096 --core 4 --name ubuntu-cloud --net0 virtio,bridge=vmbr0\rThis creates a VM with ID 8200, sets the core count to 4, gives it the name \u0026ldquo;ubuntu-cloud\u0026rdquo; and sets the first network interface to use the virtio driver and the vmbr0 \u0026lsquo;bridge\u0026rsquo;.\nImport then attach the downloaded CloudInit image to the VM #\rFor it to be used by the VM, the cloudinit image must be imported to the VM and placed in a proxmox storage. Think of this as converting the downloaded \u0026lsquo;img\u0026rsquo; file into a qcow2 file, Proxmox\u0026rsquo;s preferred format. On my server, that storage that will hold the resulting qcow2 file is called \u0026ldquo;data4tb\u0026rdquo;.\nThe commands are below - The bolded text needs to be adapted for your environment.\n\u0026ldquo;noble-server-cloudimg-amd64.img\u0026rdquo; is the file name from the wget command which will be imported into the Proxmox VM as \u0026lsquo;vm-8200-disk-0\u0026rsquo;\u0026hellip; It\u0026rsquo;s disk number 0 of VM id 8200.\nThe cloudinit disk images are just big enough. This means that once it\u0026rsquo;s up and running you won\u0026rsquo;t have enough disk space to store very much. In my testing I failed to install more than 2 or 3 packages as the VM ran out of space. To alleviate this issue, the commands include growing the disk. Doing it at this stage has the benefit that at first start, the filesystem will expand to fill the disk. The \u0026lsquo;resize\u0026rsquo; command tells pve to grow the disk so if it was 3Gbytes to start with the command below will give you a disk of 53Gb.\nThe last command sets the boot order to contain just one disk, the one attached to scsi0.\nqm disk import 8200 noble-server-cloudimg-amd64.img data4tb\rqm set 8200 --scsihw virtio-scsi-pci --scsi0 data4tb:vm-8200-disk-0\rqm resize 8200 scsi0 +50G\rqm create --boot order=scsi0\rAdd a Cloudinit \u0026lsquo;drive\u0026rsquo; to the VM #\rThe cloudinit drive (usually an ISO file - pve will (re-)generate it for you) contains the parameters for the cloudinit operation that will take place when the VM boots. The parameters/values can be set in the Proxmox GUI and this is done later in this process: Note that the first command will create the cloud-init disk - though it\u0026rsquo;s actually an ISO file rather than a generic disk. It will output the progress of the creation of the disk.\nqm set 8200 --ide2 data4tb:cloudinit\rAdd a serial console to the VM and enable Guest Agent #\rThis step is needed to enable you to view boot output, etc. via Proxmox\u0026rsquo;s Console function (VNC - a virtual remote/screen).\nIf you you don\u0026rsquo;t plan on adding some SSH keys, this step is vital. Without it, in the absence of SSH keys, you won\u0026rsquo;t be able to log in even from the pve console.\nBy default, pve does not try to talk to the guest agent on VMs. I recommend switching that on as it gives visibility in the GUI to the VM\u0026rsquo;s networking which is very useful, especially when the network was set up for DHCP.\nqm set 8200 --serial0 socket --vga serial0\rqm set 8200 --agent enabled=1\rConvert the VM to a template #\rWhile you can clone a VM, it\u0026rsquo;s best practice to create a template (as mentioned above) which you configure as needed and to then clone the template to a VM when you need a VM.\nqm template 8200\rConfigure CloudInit (the parameters, that is) #\rIn Cloudinit images, the cloudinit process which is executed on every start of a cloudinit VM takes its configuration from the configuration data stored in the cloudinit disk we created earlier. This section explains how to populate that disk with the custom configuration we need.\nYou can manually configure the cloudinit parameters using the GUI as mentioned earlier. However the intent of this article is to document the steps you will need to create the VMs using just the command line so that, in time, we can automate the process via a script or an automation tool.\nCertain aspects of cloudinit can be configured individually on the command-line. e.g. you can set the ssh key to the contents of a file thus: qm set 8200 --sshkey ~/.ssh.id_rsa.pub which will set the cloudinit SSH key to the contents of the id_rsa.pub (the public key) from the .ssh directory of the user\u0026rsquo;s home directory.\nI need to be able to ssh into the VMs from multiple different places: my \u0026lsquo;home\u0026rsquo; computer, the Proxmox server\u0026rsquo;s CLI and from my Ansible server and for this I need set the cloudinit SSH Key to contain all three keys.\nThe easiest way to do this is to update the \u0026lsquo;user\u0026rsquo; section of cloudinit which includes configuration of the user, their password, and other parameters including the various ssh keys that will be needed. Note that you only deploy the public keys! And it\u0026rsquo;s best practice not to set a password for the user which, in effect, enforces the more secure use of SSH keys to log in remotely.\nTo do this, we need to create a yaml configuration file. For my example, the yaml file will look like this:\n#cloud-config hostname: ubuntu-cloud manage_etc_hosts: true fqdn: ubuntu-cloud.lab.davidmjudge.me.uk user: ansibleuser # You can add a password here, but that\u0026#39;s not generally considered a best # practice as it\u0026#39;s better to ssh in using keys. # If you want to be able to log in via Proxmox\u0026#39;s console, you need to set a password. ssh_authorized_keys: - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKL1EWv5ZwWTti7qoZbA+OZDGE5U+JhUU1Mxb+M0ZxkL ansibleuser@ansible4 - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAP9eyxA4P8mE51qmbnigiuEmX72dRFRuN4SLmp0ISuA david@Ryzen2 chpasswd: expire: False users: - default package_upgrade: true The user-data configuration can be used for much more - later in this article you will see how I configured it to install the package qemu-guest-agent and start it - see the \u0026lsquo;packages:\u0026rsquo; and \u0026lsquo;runcmd:\u0026rsquo; sections of the user configuration a little further down.\nConfiguring cloudinit custom configuration files #\rCloudinit allows you to use configuration files that are read by cloudinit at startup. While there are 4 different areas or sections in cloudinit (user, network and meta, vendor), I will only need to customise 2 of them: user and network.\nYou can then use the yaml files for user and network to configure these aspect of cloudinit.\nThese configuration files must reside on a PVE filesystem configured to contain snippets. The next few paragraphs cover the creation of a directory in the pve GUI to hold the snippets.\nOne thing to note is that once you are using cicustom files, changes via the GUI to the cloudinit configuration will have no effect ad the contents of the configurations will take precendence.\nCreating a snippets directory #\rThe cloudinit configuration yaml files must be stored in a location that can be reached when the VM is starting - i.e. in a pve storage location. To be able to create a snippet, you will first need to add a \u0026ldquo;snippet\u0026rdquo; storage if you haven\u0026rsquo;t got one. To do this, in the Proxmox GUI, select your storage view and add a \u0026lsquo;directory\u0026rsquo; storage: I created a storage called \u0026ldquo;snip\u0026rdquo; and gave it a the following location in the pve\u0026rsquo;s filesystem: /snipfiles. When the snippet location is created it creates a \u0026ldquo;snippets subfolder in \u0026ldquo;/snipfiles:\nroot@pve:/# tree snipfiles/\rsnipfiles/\r└── snippets\r2 directories, 0 files Thus \u0026ldquo;/snipfiles/snippets\u0026rdquo; will be the folder in the pve\u0026rsquo;s filesystem where I will place snippets on my pve server.\nProxmox (or cloudinit) does not seem to like subdirectories in the snippets. You must create the configuration files in the snippets directory (i.e. /snipfiles/snippets).\nCreating the configurations file \u0026ldquo;snippets\u0026rdquo; #\rWhile there are 4 different areas or sections in cloudinit (user, network and meta, vendor), I will only need to customise 2 of them: user and network.\nYou can then use the yaml files for user and network to configure these aspect of cloudinit.\nLet\u0026rsquo;s create the two files. First the file for the user section which contains the hostname/FQDN, user, SSH keys and other parameters:\ncat \u0026gt;\u0026gt; /snipfiles/snippets/user-data.yaml \u0026lt;\u0026lt;EOF #cloud-config hostname: ubuntu-cloud manage_etc_hosts: true fqdn: ubuntu-cloud.lab.davidmjudge.me.uk user: ansibleuser ssh_authorized_keys: - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKL1EWv5ZwWTti7qoZbA+OZDGE5U+JhUU1Mxb+M0ZxkL ansibleuser@ansible4 - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAP9eyxA4P8mE51qmbnigiuEmX72dRFRuN4SLmp0ISuA david@Ryzen2 chpasswd: expire: False users: - default package_upgrade: true # Following lines are useful if the options of the template have \u0026#34;QEMU Guest Agent\u0026#34; set to true. # When it is true and the agent is installed and running, pve can \u0026#34;see inside\u0026#34; the VM # and retrieve extra information such as the network configuration and display it in the GUI. package_reboot_if_required: true packages: - qemu-guest-agent runcmd: - systemctl start qemu-guest-agent - systemctl enable qemu-guest-agent - echo \u0026#34;qemu-guest-agent enabled and started.\u0026#34; \u0026gt;\u0026gt; ~root/cloutinit-finished.txt EOF The above configuration contains some extra entries to install the QEMU guest agent and to enable and start the service.\nThen the file for the network section which contains the usual network configuration items:\ncat \u0026gt;\u0026gt; /snipfiles/snippets/network-data.yaml \u0026lt;\u0026lt;EOF version: 1 config: - type: physical name: eth0 mac_address: \u0026#39;bc:24:11:39:d8:2a\u0026#39; subnets: - type: static address: \u0026#39;192.168.178.210\u0026#39; netmask: \u0026#39;255.255.255.0\u0026#39; gateway: \u0026#39;192.168.178.1\u0026#39; - type: nameserver address: - \u0026#39;192.168.178.1\u0026#39; search: - \u0026#39;lab.davidmjudge.me.uk\u0026#39; EOF Note that the MAC address will be replaced when the VM template is cloned, as MAC addresses need to be unique.\nYou can verify the full reference/path of the configuration files (what the pve documentation calls \u0026ldquo;\u0026rdquo;) you just created with the command pve list snip where \u0026ldquo;snip\u0026rdquo; is the name of the storage:\nroot@pve:/# pvesm list snip\rVolid Format Type Size VMID\rsnip:snippets/network-data.yaml snippet snippets 340\rsnip:snippets/user-data.yaml snippet snippets 639 The snippets must be in the root of your snippets volume - You cannot reference snippets in subdirectories.\nThe next command will configure cloudinit for our template with the 2 sections we created above. The command I will reference the snippets using the \u0026ldquo;snippets\u0026rdquo; storage reference snip: (as displayed by the pvesm list command).\nqm set 8200 --cicustom \u0026#34;user=snip:snippets/user-data.yaml,network=snip:snippets/network-data.yaml\u0026#34; The qm set \u0026ndash;cicustom command changes, in effect, the whole of the cloudinit configuration. You can\u0026rsquo;t run it first for \u0026lsquo;user\u0026rsquo; and then for \u0026rsquo;network\u0026rsquo; as running it for \u0026rsquo;network\u0026rsquo; will clear the \u0026lsquo;user\u0026rsquo; configuration. The snippets are read/used when the VM is created.\nYou can also use this command on a cloudinit VM (as opposed to a template) - i.e. once you\u0026rsquo;ve cloned the template. The changes will take effect next time you start the VM.\nWhile it is not possible today to view the cloudinit settings you have set in the GUI, you can check the VM/template\u0026rsquo;s config file. For the 8200 template, look at the content of /etc/pve/qemu-server/8200.conf. You will see the following line:\ncicustom: user=snip:snippets/user-data.yaml,network=snip:snippets/network-data.yaml To create the 4 VMs that started this article, I will eventually create 4 separate sets of config files and will prefix the filename with the hostnamename or id of the node - e.g. for the 3rd worker node, I would copy user-data.yaml to kworker_3_-user-data.yaml and then customise it.\nClone the template into a new VM #\rHere we clone the template to a new VM with ID 210 (which must be an available ID), making a full clone (independent from the template) and placing it in the \u0026lsquo;data4tb\u0026rsquo; storage.\nqm clone 8200 210 --full true --storage data4tb All that\u0026rsquo;s left to do is start the VM\nParting thoughts #\rThe process of creating the VMs for my k3s cluster can now start. My next step will be to write a script to take the \u0026ldquo;base\u0026rdquo; cloudinit data files and copy them to -user-data.yaml and -network-data.yaml and to customise them with data secific to the new vm such as hostname, fqdn and IP address.\nI think I will porbably write an article about that as I suspect not everyone knows the techniques that can be used to make this easy. Watch this space.\nAnd if you\u0026rsquo;ve made it this far, many thanks for your perseverance. If you\u0026rsquo;ve found this useful, please let me know - either comment where you found the link (probably a LinkedIn post, or maybe my github), and maybe a like if you think the article is worthy of one.\nUseful resources #\rProxmox documentation\nProxmox Cheatsheet by Software Engineering World\nTop 10 Proxmox CLI commands - Naviko\nAll cloud config examples\nCloudInit Reference with details of many modules one can use\n","date":"1 July 2025","externalUrl":null,"permalink":"/homelabbing/proxmox-cloudinit/","section":"","summary":"","title":"Proxmox and CloudInit","type":"homelabbing"},{"content":"","date":"1 July 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"1 July 2025","externalUrl":null,"permalink":"/tags/testing/","section":"Tags","summary":"","title":"Testing","type":"tags"},{"content":"\rThe start of the content of the Homelabbing item #\rThis is the content of my first Homelabbing item.\nThe End\u0026hellip; #\r","date":"1 July 2025","externalUrl":null,"permalink":"/homelabbing/first-homelabbing-item/","section":"","summary":"","title":"This is my First Homelabbing Item","type":"homelabbing"},{"content":"\rThe start of the content of the portfolio item #\rThis is the content of my first portfolio item.\nThe End\u0026hellip; #\r","date":"1 July 2025","externalUrl":null,"permalink":"/portfolios/first-portfolio-item/","section":"","summary":"","title":"This is my First Portfolio Item","type":"portfolios"},{"content":"","externalUrl":null,"permalink":"/about/","section":"","summary":"","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/resources/","section":"","summary":"","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]